Jenkins is an open-source automation server used for continuous integration (CI) and continuous deployment (CD) (CI/CD). It helps automate the process of building, testing, and deploying applications.

Why Use Jenkins?
==========================
Automates Repetitive Tasks: Automatically runs builds, tests, and deployments.

Supports CI/CD Pipelines: Integrates with Git, Docker, Kubernetes, AWS, etc.

Extensible with Plugins: Has 1,800+ plugins to integrate with various tools.

Easy to Configure: Uses a web-based UI or Jenkinsfile (pipeline as code).


How Jenkins Works
==========================
Developers push code to a Git repository (e.g., GitHub, GitLab, Bitbucket).

Jenkins pulls the latest code and triggers a build.

Jenkins runs tests to verify the code.

If successful, Jenkins deploys the application to a server.



CI WITH JENKINS
========================================================================================

code build and test as soon as developer commit the changes
auto deployment on successful software build and notify the stake holder
notify the errors to the dev team on build failure 

JENKINS MASTER SLAVE
==========================

Jenkins follow the master slave architecture 

there are 2 types of node 
master node and slave nodes

Master node = master node works as a controller , it manages the task executing on the worker nodes 
		all kind of user commands are accepted by the master node and all kind of output given to the user are given by the master node

Worker node = slave node /worker node will work as a execution node ,only work which is to be done by the worker node is the execution 
  		single master node can have multiple slave nodes 
		master node controls the load distribution on the slave nodes 
======================================================================================================

JENKIN JOBS
================================

jobs in Jenkins are the runnable tasks that is controlled by Jenkins 

for each execution task we need to create a Jenkins jobs 

1) FREESTYLE PROJECT
	this is most common type of JOB ,In a freestyle job you can create a job where you can execute multiple commands in a shell or windows bash 

2) PIPELINE
	 these type of project are used to called a workflow which will have some kind of input and produce some output 
	 these project are normally written in DSL

3) multi configuration project 
	 it is similar  to freestyle project but it is more flexible in terms of the environment 
	 where you want to create a project which will be tested on the multiple environment 
    	 it will require specific configuration for each environment 


LOOK FOR PREDEFINED JENKINS ENV VARIABLES 
ipaddress:port/env-vars.html

============================================================================================
DISTRIBUTED BUILDS
=============================================================================================

distributed builds runs on nodes rather than built in master node 

workers that run on nodes manage the task execution on behalf of the Jenkins master

the Jenkins master manages these node to do the actual build work 

different nodes can run different operating system and different tools enabling one pipeline to build and test the same software for a variety of platforms and environments 

all production Jenkins instances should run distributed builds


 Key Advantages of Distributed Builds in Jenkins
=================================================
Load Balancing: Distributes jobs across agents to balance the load.

Parallelism: Multiple agents can run jobs in parallel, speeding up your overall build process.

Cross-Platform Builds: Run different builds on different operating systems (Windows, Linux, macOS, etc.).

Security: running jobs on separate and isolated machines migrates tge risks of someone accessing the restricted data from the Jenkins master 

Better Resource Utilization: Use different resources (CPU, RAM)  more effectively by running builds on specific machines.

========================================
TYPES OF DISTRIBUTED BUILDS 
========================================


Single master multi slave

Multi master multi slave

COMPONENTS OF DISTRIBUTED JENKINS 
==============================================

MASTER/CONTROLLER : Jenkins service itself which acts as a brain and decide where when and how things will happne   management and admin tasks such as backup logging rbac etc

NODES : Nodes are the "machines" on which build agents run. Jenkins monitors
	Resource utilization of each node and a node is taken offline if any of these
	values go outside the configured threshold.
 
Executors: It is a thread in the agent. The number of executors on a node defines the
	   number of concurrent tasks that can be executed on that node at one time.

Agents :Manages the task execution assigned by Jenkins. They are light  weight Jenkins instance that's runs on different nodes.


JENKINS PIPELINE
======================================================
a Jenkins pipeline is a collection of events or jobs which are interlinked with one another in a sequence



pipeline is just a collection of stages 

code commit -> build -> integrate -> test -> release -> deploy -> operate 

continuous feedback at all stages 


BENFITS OF PIPELINE
====================

pipeline code is generally at a central git repo so it is version controlled

pipeline code is easy to maintain and migrate

parallel task execution 

complex condition logic execution

dynamic resource allocation and cleanups 



pipeline {
    agent any

    stages {
          stage('Build') {
            agent {
                docker {
                    image 'node:18-alpine'
                    reuseNode true ---------------> reuses the existing workspace createdby the previous stage/step
                }
            }
            steps {
                sh ''' 
                ls -la
                node --version
                npm --version
                npm ci
                npm run build
                ls -la
                '''
            }
              }
              stage('test')
              {
                  steps{
                      sh 'echo "new stage added "'
                  }
        }
    }
}


jUnit - a j unit test report is a file generated by the junit testing framework in java projects and this file genrally uses xml format 






========================================================================================

DECLARATIVE AND SCRIPTED PIPELINE SYNTAX


DECLARATIVE : 
		execution can be stopped and resumed after an interruption no matter what caused the interruption 
	 	
		required only limited knowledge of groovy 
		
		reduces risk of syntax errors


SCRIPTED :  
		executes serially from top to down 
		
		relies on groovy expressions for flow control, extensive groovy knowledge is required 
		
		very flexible and extensible
		
		limitations are mostly groovy based but provides more functionality than declarative 
		
		not suited for novice users








=================================================
MULTI BRANCH PIPELINE
=================================================

a multibranch pipeline is a concept of automatically crating Jenkins pipelines based on Git branches

it can automatically discover new branches in the source control and automatically create a pipeline for that branch 

when the pipeline build starts Jenkins uses the jenkinsfile in that branch for build satges
